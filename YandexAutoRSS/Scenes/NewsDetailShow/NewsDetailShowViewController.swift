//
//  NewsDetailShowViewController.swift
//  YandexAutoRSS
//
//  Created by msm72 on 01.11.2017.
//  Copyright (c) 2017 RemoteJob. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

// MARK: - Input & Output protocols
protocol NewsDetailShowDisplayLogic: class {
    func displayFeedItem(fromViewModel viewModel: NewsDetailShowModels.FeedItem.ViewModel)
}

class NewsDetailShowViewController: UIViewController {
    // MARK: - Properties
    var interactor: NewsDetailShowBusinessLogic?
    var router: (NSObjectProtocol & NewsDetailShowRoutingLogic & NewsDetailShowDataPassing)?
    
    
    // MARK: - IBOutlets
    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var descriptionTextView: UITextView!
    @IBOutlet weak var spinner: UIActivityIndicatorView!
    @IBOutlet weak var imageViewTopConstraint: NSLayoutConstraint!
    
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController          =   self
        let interactor              =   NewsDetailShowInteractor()
        let presenter               =   NewsDetailShowPresenter()
        let router                  =   NewsDetailShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        viewSettingsDidLoad()
    }
    
    
    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        let requestModel = NewsDetailShowModels.FeedItem.RequestModel()
        interactor?.doSomething(request: requestModel)
    }
}


// MARK: - NewsDetailShowDisplayLogic
extension NewsDetailShowViewController: NewsDetailShowDisplayLogic {
    func displayFeedItem(fromViewModel viewModel: NewsDetailShowModels.FeedItem.ViewModel) {
        // NOTE: Display the result from the Presenter
        if let imageURL = viewModel.imageURL {
            imageView.kf.setImage(with: ImageResource.init(downloadURL: imageURL, cacheKey: imageURL.absoluteString),
                                  placeholder: nil,
                                  options: [.transition(ImageTransition.fade(1)),
                                            .processor(ResizingImageProcessor(referenceSize: imageView.frame.size,
                                                                              mode: .aspectFill))],
                                  completionHandler: { image, error, cacheType, imageURL in
                                    self.imageView.kf.cancelDownloadTask()
                                    self.spinner.stopAnimating()
            })
        } else {
            imageView.image = UIImage.init(named: "no-image-3")
            self.spinner.stopAnimating()
        }
        
        descriptionTextView.text = viewModel.description
        navigationItem.title = viewModel.title
    }
}
